running: ../../parser_tests/fold_test1.in...
  contents of file: class Compilers() {
     a := 1;
     {b := 2;
      c := 3;}
     d := 4;
}
a:=1;--EOF--


running: ../../parser_tests/lexer_error_test1.in...
  contents of file: `this `should `fail--EOF--


running: ../../parser_tests/lexer_error_test2.in...
  contents of file: something"
thing "something--EOF--


running: ../../parser_tests/lexer_error_test3.in...
  contents of file: `blah ' blah 'blah `--EOF--


running: ../../parser_tests/parser_error_test10.in...
  contents of file: class MyClass<C>() extends MyOtherClass { }--EOF--
1c1
< lexer error
\ No newline at end of file
---
> parser error
\ No newline at end of file


running: ../../parser_tests/parser_error_test11.in...
  contents of file: return false--EOF--
1c1
< lexer error
\ No newline at end of file
---
> parser error
\ No newline at end of file


running: ../../parser_tests/parser_error_test12.in...
  contents of file: v := true--EOF--
1c1
< lexer error
\ No newline at end of file
---
> parser error
\ No newline at end of file


running: ../../parser_tests/parser_error_test13.in...
  contents of file: # parser test program 2
interface GoodStudent extends Student
{
	fun doHomework() : GoodGrade;
	fun askQuestion() : Knowledge;
--EOF--
1c1
< lexer error
\ No newline at end of file
---
> parser error
\ No newline at end of file


running: ../../parser_tests/parser_error_test14.in...
  contents of file: `this should error'--EOF--
1c1
< lexer error
\ No newline at end of file
---
> parser error
\ No newline at end of file


running: ../../parser_tests/parser_error_test15.in...
  contents of file: interface MyInterface { fun myFun() : Int fun myFun() : String }--EOF--
1c1
< lexer error
\ No newline at end of file
---
> parser error
\ No newline at end of file


running: ../../parser_tests/parser_error_test16.in...
  contents of file: class Hello() extends World{ 
	fun Eff() : Hello = 2;
} 
return true;
--EOF--
1c1
< lexer error
\ No newline at end of file
---
> parser error
\ No newline at end of file


running: ../../parser_tests/parser_error_test17.in...
  contents of file: class MyClass extends Thing { } 
return true;--EOF--
1c1
< lexer error
\ No newline at end of file
---
> parser error
\ No newline at end of file


running: ../../parser_tests/parser_error_test1.in...
  contents of file:  --EOF--
1c1
< lexer error
\ No newline at end of file
---
> parser error
\ No newline at end of file


running: ../../parser_tests/parser_error_test2.in...
  contents of file: while (true) foo();--EOF--
1c1
< lexer error
\ No newline at end of file
---
> parser error
\ No newline at end of file


running: ../../parser_tests/parser_error_test3.in...
  contents of file: error();--EOF--
1c1
< lexer error
\ No newline at end of file
---
> parser error
\ No newline at end of file


running: ../../parser_tests/parser_error_test4.in...
  contents of file: interface myInterface { } --EOF--
1c1
< lexer error
\ No newline at end of file
---
> parser error
\ No newline at end of file


running: ../../parser_tests/parser_error_test5.in...
  contents of file: interface MyInterface<In> { } return 1;--EOF--
1c1
< lexer error
\ No newline at end of file
---
> parser error
\ No newline at end of file


running: ../../parser_tests/parser_error_test6.in...
  contents of file: if (blah) {eff} {this} else {lol};--EOF--
1c1
< lexer error
\ No newline at end of file
---
> parser error
\ No newline at end of file


running: ../../parser_tests/parser_error_test7.in...
  contents of file: return i++;--EOF--
1c1
< lexer error
\ No newline at end of file
---
> parser error
\ No newline at end of file


running: ../../parser_tests/parser_error_test8.in...
  contents of file: for (foo) return bar();--EOF--
1c1
< lexer error
\ No newline at end of file
---
> parser error
\ No newline at end of file


running: ../../parser_tests/parser_error_test9.in...
  contents of file: fun foo() : Bar;
return true;--EOF--
1c1
< lexer error
\ No newline at end of file
---
> parser error
\ No newline at end of file


running: ../../parser_tests/parser_test10.in...
  contents of file: fun foo <X, Y> ( ) : Z { return e; } interface MyInterface{ } return true ;--EOF--


running: ../../parser_tests/parser_test11.in...
  contents of file: return ((true));
fun foo (y : Integer) : Integer = y * 4;
{ }--EOF--


running: ../../parser_tests/parser_test12.in...
  contents of file: for (i in 5..10) { }
for (i in 5...) { } 
  --EOF--


running: ../../parser_tests/parser_test13.in...
  contents of file: return 0..3;
return 0<.3;
return 0.<3;
return 0<<3;
return 0...;
return 0<..;
return (0..3)++(4..5);--EOF--


running: ../../parser_tests/parser_test14.in...
  contents of file: return -a+b*c*(d-e*-f);--EOF--


running: ../../parser_tests/parser_test15.in...
  contents of file: class MyClass1 () extends MyClass2<MyClass3, MyClass4> { super("man");} return true;--EOF--


running: ../../parser_tests/parser_test16.in...
  contents of file: interface MyInterface {
    fun foo() : Bar;
}

class MyClass() {
	fun foo() : Bar {
		a := 1 + 2 * 3;
		return -a;
	}
	
	fun zardoz(hello:Boolean) : Boolean {
		if (true) {
		return hello;
		} else {		
		return !hello;
		}
	}
}

return "one";--EOF--


running: ../../parser_tests/parser_test17.in...
  contents of file: return [true, false, 42, "zardoz", [hello, world], true++false, hello.world<T>(e), world<>()];--EOF--


running: ../../parser_tests/parser_test18.in...
  contents of file: if (MyClass()) return true;--EOF--


running: ../../parser_tests/parser_test19.in...
  contents of file: fun ross<T>() : Tate k:=1;
return ross<Type>();
--EOF--


running: ../../parser_tests/parser_test1.in...
  contents of file: # parser test program 1
return 5+3;--EOF--


running: ../../parser_tests/parser_test20.in...
  contents of file: ##
return (a != b);
return [a<<b];
return [a.b().c().d<T>()];--EOF--


running: ../../parser_tests/parser_test21.in...
  contents of file: class Fib (v : Int) extends InterviewQuestions {
    super();

    fun fib(n : Int) : Int {
        if ( n == 1 | n == 2 ) {
         return 1; 
        }
        first := 1;
        second := 1;
        while(n > 2) {
            tmp := second;
            second := first + second;
            first := tmp;
            n := n - 1;
        }
        return second;
    }
}

return 5;--EOF--


running: ../../parser_tests/parser_test22.in...
  contents of file: for (i in "hello") for (i in k<..) return true;--EOF--


running: ../../parser_tests/parser_test23.in...
  contents of file: if ("your `dad' " `hai' == 999 * 32 / (- 1 - 1) ) return x; #grrr;
else { return 69; }
--EOF--


running: ../../parser_tests/parser_test24.in...
  contents of file: return - 1 - 1;
--EOF--


running: ../../parser_tests/parser_test25.in...
  contents of file: thing := 2 + 3 . plus < > ( 4 );--EOF--


running: ../../parser_tests/parser_test26.in...
  contents of file: if (((((((((true))))))))) return true == true; else return false #
` hasdf
adna
bd
wejo
'
;--EOF--


running: ../../parser_tests/parser_test27.in...
  contents of file: for ( example1309421 in examples ) {
  a := (3*2).minus (1) == 3 * 2-1;
  b := 2.minus(1) * 3 != 2-1*3;
  b := 3*2.minus(1) != 3 * 2 - 1;
  a := (( (true.equals(true)) ) ) | true;
}--EOF--


running: ../../parser_tests/parser_test28.in...
  contents of file: {
	a := 2;
	return 3;
	if (a){
		x := 2;
		y := 3; 
		z := 4;
	}
	return "hello";
	for (y in true) {
		va := 3;
	}
	{
		return 1;
		return 2;
		return 3;
	}
	while (what) {
		return 4;
	}
}--EOF--


running: ../../parser_tests/parser_test29.in...
  contents of file: return 0;
{
	return 1;
	return 2;
	{
		return 3;
		return 4;
	}
	{
		return 5;
		{ 
			return 6;
			return 7;
		}
		{
			return 8;
		}
	}
	return 9;
}--EOF--


running: ../../parser_tests/parser_test2.in...
  contents of file: # parser test program 2
interface GoodStudent extends Student
{
	fun doHomework() : GoodGrade;
	fun askQuestion() : Knowledge;
}
return "hello world";--EOF--


running: ../../parser_tests/parser_test3.in...
  contents of file: # parser test program 3
if(a>b) {z:=a-b; x:=u.v(z);}--EOF--


running: ../../parser_tests/parser_test4.in...
  contents of file: # parser test program 4
return "hello
world!";--EOF--


running: ../../parser_tests/parser_test5.in...
  contents of file: # parser test program 5
"hello world!"--EOF--
1c1
< lexer error
\ No newline at end of file
---
> parser error
\ No newline at end of file


running: ../../parser_tests/parser_test6.in...
  contents of file: class MyClass() { } return " ";--EOF--


running: ../../parser_tests/parser_test7.in...
  contents of file: while (0 == 0) {
    x := (4 % 2 - 1) / 6;
    if (1 < 2 & 3 <= 4 & 5 > 6 | 7 >= 8)
   		return ("a" != "b");  
}--EOF--


running: ../../parser_tests/parser_test8.in...
  contents of file: {one := 1;{one := 1;{one := 1;{one := 1;}}{one := 1;}}}                        --EOF--


running: ../../parser_tests/parser_test9.in...
  contents of file: interface MyInterface<I, S, C> extends Boolean & Boolean{ }

class MyClass<A,B>(zardoz:Zardoz, hello:Hello) extends Nothing { }

return 0;--EOF--


