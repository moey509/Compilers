# Common Subexpression Elimination (5)
# This program does either O(n) steps if there is CSE, or O(5^n) steps without CSE);

fun build(n : Iterable<Iterable<Nothing>>) : Iterable<Iterable<Nothing>> {
	b := [[]];
	a := build(remove(n));
	for (i in n)
		b := b ++ a;
	return b;
}
fun remove(s : Iterable<Iterable<Nothing>>) : Iterable<Iterable<Nothing>> {
	r := [];
	b := false;
	for (c in s)
		if ( b )
			r := [c]++r;
		else
			b := true;
	return r;
}
fun empty(s : Iterable<Iterable<Nothing>>) : Iterable<Iterable<Nothing>> {
	for (c in remove(s)) {
		a := empty(remove(s));
		b := empty(remove(s));
		return a++b;
	}
	return [];
}
for (c in empty(build([[],[],[],[]])))
	return ["No"];
return ["Yes"];
