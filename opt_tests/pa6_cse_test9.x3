# Common Subexpression Elimination (9)
# This program does either O(n) steps if there is CSE, or O(5^n) steps without CSE);

fun expensive(n : Integer) : Integer {
	if (n <= 0)
		return 0;
	else
		return expensive(n-1)+expensive(n-2);
}
n := 20;
fib := expensive(n);
fibb := expensive(19);
i := 0;
sum := 0;
while (i < 1000) {
	i := i + 1;
	sum := expensive(20) - expensive(19) + sum;
}
if (sum == (fib - fibb) * 1000)
	return ["Yes"];
return ["No"];
